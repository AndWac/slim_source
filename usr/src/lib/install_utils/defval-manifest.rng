<!--
CDDL HEADER START

The contents of this file are subject to the terms of the
Common Development and Distribution License (the "License").
You may not use this file except in compliance with the License.

You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
or http://www.opensolaris.org/os/licensing.
See the License for the specific language governing permissions
and limitations under the License.

When distributing Covered Code, include this CDDL HEADER in each
file and include the License file at usr/src/OPENSOLARIS.LICENSE.
If applicable, add the following below this CDDL HEADER, with the
fields enclosed by brackets "[]" replaced with your own identifying
information: Portions Copyright [yyyy] [name of copyright owner]

CDDL HEADER END

Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
Use is subject to license terms.
-->

<!--
===============================================================================
RelaxNG schema for defaults / validation manifest specification.

Tree has three parts:
- helper list: Names of helper methods used to calculate defaults and to
	validate nodes in the Distribution Constructor input DC-manifest.xml
	document.  The subtree root is <helpers>.  Each element in this subtree
	contains the name of a method, the module it is in, and a refname.  A
	refname is a nickname by which the method/module pair are referred to in
	the rest of the XML document.
- List of requests for validation: Each "validate" element specifies at a
	minimum, the nodepath (which can match one or more nodes) to be
	validated, and the refname of the method to be used for validation.  It
	may contain optional attributes for how to deal with missing nodes.
- List of requests for defaults: Each "default" element specifies at a
	minimum, the nodepath (which can match one or more nodes) to check and
	add a default if necessary.  It may contain optional attributes for how
	to deal with missing nodes.
===============================================================================
-->

<grammar
    xmlns="http://relaxng.org/ns/structure/1.0"
    datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

	<!-- DC manifest content validation and defaults -->
	<start>
		<element name="DC_manifest_defval">
			<attribute name="name"/>
			<ref name="nm_helper_list"/>
			<zeroOrMore>
				<choice>
					<ref name="nm_validate_content"/>
					<ref name="nm_install_default"/>
				</choice>
			</zeroOrMore>
		</element>
	</start>

	<!--
	=======================================================================
	Helper definition section.
	=======================================================================
	-->

	<!-- Registry of helper methods for validation and setting defaults. -->
	<define name="nm_helper_list">
		<element name="helpers">
			<zeroOrMore>
				<choice>
					<ref name="nm_validator"/>
					<ref name="nm_deflt_setter"/>
				</choice>
			</zeroOrMore>
		</element>
	</define>

	<define name="nm_validator">
		<element name="validator">
			<attribute name="ref"/>		<!-- Shortcut name -->
			<attribute name="module"/>	<!-- Python module. -->
			<attribute name="method"/>	<!-- Method name. -->
			<optional>
				<!-- Invert polarity of method return value -->
				<attribute name= "invert"/>
			</optional>
			<empty/>
		</element>
	</define>

	<define name="nm_deflt_setter">
		<element name="deflt_setter">
			<attribute name="ref"/>		<!-- Shortcut name -->
			<attribute name="module"/>	<!-- Python module. -->
			<attribute name="method"/>	<!-- Method name. -->
			<empty/>
		</element>
	</define>

	<!--
	=======================================================================
	Defaults section.
	=======================================================================
	-->

	<!-- Elements specifying processing of defaults.  "nodepath" is the
	     nodepath in the DOM tree of the element or attribute to assign a
	     default.  Defaults can be assigned either by setting a value, or by
	     calling a python method.  To assign a value, set "type" attribute
	     to "value" and then specify the value as a text value in this
	     element.  To call a python method, set "type" attribute to "helper"
	     and specify the helper's shortcut name as a text value in this
	     element. -->
	<define name="nm_install_default">
		<element name="default">
			<attribute name="nodepath"/>
			<attribute name="type">
				<choice>
					<value>element</value>
					<value>attribute</value>
				</choice>
			</attribute>
			<attribute name="from">
				<choice>
					<value>value</value>
					<value>helper</value>
				</choice>
			</attribute>
			<optional>	<!-- Default is "error" -->
				<attribute name="missing_parent">
					<choice>
						<value>create</value>
						<value>skip</value>
						<value>error</value>
					</choice>
				</attribute>
			</optional>
			<optional>	<!-- Default is don't skip -->
				<!-- Nodepath from the root which must exist in
				     order for the default setting to occur. -->
				<attribute name="skip_if_no_exist"/>
			</optional>
			<optional>	<!-- Default is to take default -->
				<attribute name="empty_str">
					<choice>
						<value>set_default</value>
						<value>valid</value>
						<value>error</value>
					</choice>
				</attribute>

			</optional>
			<text/>
		</element>
	</define>

	<!--
	=======================================================================
	Validation section.
	=======================================================================
	-->

	<!-- Elements specifying validation.  "nodepath" is the nodepath in the
	     DOM tree of the element or attribute to validate.  One or more
	     python methods, helpers referenced by their shortcut names, are
	     specified to do the validation. -->
	<define name="nm_validate_content">
		<element name="validate">
			<choice>
				<ref name="nm_validate_nodepath"/>
				<ref name="nm_validate_group"/>
				<ref name="nm_validate_exclude"/>
			</choice>
		</element>
	</define>

	<!-- Validate nodes which match a given nodepath, by calling one or more
	     methods.  If the node is missing, handle based on the "missing"
	     attribute:
		"ok_if_no_parent" means it is OK for the node to be missing only
		if there is no nodepath to get to it (as when validating
		.../user/shell, that a shell exists for a user.  No shell is
		required when there is no user. -->
	<define name="nm_validate_nodepath">
		<group>
			<!--Element nodepath to validate -->
			<attribute name="nodepath"/>

			<optional>	<!-- Default is "error" -->
				<attribute name="missing">
					<choice>
						<value>ok_if_no_parent</value>
						<value>ok</value>
						<value>error</value>
					</choice>
				</attribute>
			</optional>
			<optional>	<!-- Default is don't skip -->
				<!-- Nodepath from the root which must exist in
				     order for the validation to occur. -->
				<attribute name="skip_if_no_exist"/>
			</optional>

			<!-- List of helpers -->
			<ref name="nm_list_type"/>
		</group>
	</define>

	<!-- Validate a group of nodes in a specific way.
	     The group attribute specifies a single method by shortcut name.
	     The nodes to be validated are then listed.

	     Validates only nodes which are present.  Does not err on missing
	     nodes. -->
	<define name="nm_validate_group">
		<group>
			<attribute name="group"/>
			<ref name="nm_list_type"/>
		</group>
	</define>

	<!-- Validate all element and attribute nodes in a tree with the given
	     method, except for those nodes listed. -->
	<define name="nm_validate_exclude">
		<group>
			<attribute name="exclude"/>
			<ref name="nm_list_type"/>
		</group>
	</define>

	<!--
	=======================================================================
	Generic list.  Used by many locations.
	=======================================================================
	-->
	<define name="nm_list_type">
		<list>
			<oneOrMore>
				<data type="string"/>
			</oneOrMore>
		</list>
	</define>

</grammar>
