#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

# Use tee(1) when posting messages to both console and log file
TEE_LOGTOCONSOLE="/usr/bin/tee /dev/msglog"
# Architecture
ARCH=`/sbin/uname -p`
# Installation configuration
INSTALL_CONF=/tmp/install.conf

PRTCONF=/usr/sbin/prtconf
SED=/usr/bin/sed
AWK=/usr/bin/awk
CUT=/usr/bin/cut
GREP=/usr/bin/grep

# Directory location for the AI manifest
AI_MANIFESTDIR=/var/ai
# Location of the default AI manifest
AI_DEFAULT_MANIFEST=/usr/share/auto_install/default.xml

# Service Discovery Engine
AISD_ENGINE=/usr/bin/ai_sd
# Service Choosing Engine
AISC_ENGINE=/usr/bin/ai_get_manifest
# Auto install and System Configuration combined manifest 
# to be used for installation
AISC_MANIFEST=/tmp/ai_combined_manifest.xml
# List of services which Service Discovery Engine will
# contact for obtaining the manifest
AI_SERVICE_LIST=/tmp/service_list.$$
# debug mode
AI_DBGLVL=4
# timeout for service discovery process
AI_TIMEOUT=5

. /lib/svc/share/smf_include.sh

#
# Do multi-cast DNS service discovery in order
# to obtain installation manifests to use.
#
# Returns 0 for success and 1 for failure
#
do_service_discovery() 
{
	#
	# obtain parameters for service discovery provided in 
	# configuration files
	#  - name of service to look up
	#  - IP address and port number for fallback mechanism
	#  - turning on debug mode
	#
	# For SPARC, parameters are stored in 
	# <install_media_root_dir>/install.conf
	# This file is downloaded using HTTP protocol and saved in /tmp.
	# For X86, parameters are in defined in GRUB menu.lst
	#
	# TODO: Unify the implementation - bug 7789
	# - define one common config file for both Sparc and x86
	#   and avoid using GRUB menu.lst
	#
	if [ "${ARCH}" = "sparc" ]; then
		AI_SERVICE_NAME=`$GREP "^install_service" \
		    $INSTALL_CONF |  /usr/bin/cut -d'=' -f2`

		AI_SERVICE_ADDRESS=`$GREP "^install_svc_address" \
		    $INSTALL_CONF |  /usr/bin/cut -d'=' -f2`
	else
		AI_SERVICE_NAME=`$PRTCONF -v /devices |
		    /usr/bin/sed -n '/install_service/{;n;p;}' |
		    /usr/bin/cut -f 2 -d \'`

		AI_SERVICE_ADDRESS=`$PRTCONF -v /devices |
		    /usr/bin/sed -n '/install_svc_address/{;n;p;}' |
		    /usr/bin/cut -f 2 -d \'`
	fi

	#
	# Invoke AI Service Discovery engine. For now it tries to look up
	# given service using multicast DNS.
	#

	if [ ! -x  $AISD_ENGINE ] ; then
		echo "Couldn't find Auto Installer Service Discovery Engine" |
		    $TEE_LOGTOCONSOLE
		return 1
	fi

	if [ -z "$AI_SERVICE_NAME" ] ; then
		echo "Service name is required, but not provided" |
		    $TEE_LOGTOCONSOLE
		return 1
	fi

	echo "Service discovery phase initiated" | $TEE_LOGTOCONSOLE
	echo "Service name to look up: $AI_SERVICE_NAME" | $TEE_LOGTOCONSOLE

	$AISD_ENGINE -n $AI_SERVICE_NAME -o $AI_SERVICE_LIST -t $AI_TIMEOUT \
	    -d $AI_DBGLVL

	#
	# if service discovery over multicast DNS failed, try fallback 
	# mechanism - service on given machine at given port number will be used
	#
	if [ $? -ne 0 ] ; then
		echo "Service discovery over multicast DNS failed" |
		    $TEE_LOGTOCONSOLE

		# if location of service is not provided, give up
		if [ -z "$AI_SERVICE_ADDRESS" ] ; then
			echo "Location of service $AI_SERVICE_NAME not "
			"provided, service discovery failed" | $TEE_LOGTOCONSOLE
			return 1
		fi

		echo "Service located at $AI_SERVICE_ADDRESS will be used" |
		    $TEE_LOGTOCONSOLE
		echo "$AI_SERVICE_ADDRESS" > $AI_SERVICE_LIST
	fi

	echo "Service discovery finished successfully" | $TEE_LOGTOCONSOLE

	#
	# Invoke AI Service choosing engine. It takes list of install
	# services to connect and tries to obtain valid manifest
	#

	if [ ! -x  $AISC_ENGINE ] ; then
		echo "Couldn't find Auto Installer Service Choosing Engine" |
		    $TEE_LOGTOCONSOLE
		return 1
	fi

	echo "Process of obtaining configuration manifest initiated" |
	    $TEE_LOGTOCONSOLE

	$AISC_ENGINE -s $AI_SERVICE_LIST -o $AISC_MANIFEST -d $AI_DBGLVL

	if [ $? -ne 0 ] ; then
		echo "Couldn't obtain valid configuration manifest" |
		    $TEE_LOGTOCONSOLE
		return 1
	fi
	return 0
}

#
# Invoke the prompt to specify a manifest
# location. Set up the terminal correctly
# before invoking the prompt
#
do_get_manifest()
{
	TERM=sun-color
	export TERM
	exec </dev/console >/dev/console 2>&1
	/usr/sbin/get_manifest $AI_MANIFESTDIR
}

#
# Set up the default manifest to be *the* 
# manifest to be used
#
setup_default_manifest()
{
	mkdir -p $AI_MANIFESTDIR
	cp $AI_DEFAULT_MANIFEST $AI_MANIFESTDIR
}

if [ "${ARCH}" = "sparc" ]; then
	BOOTARGS=`$PRTCONF -vp | $GREP "bootargs" | $CUT -f 2 -d\'`
	AI_MANIFEST_ARGS2=`echo $BOOTARGS | $AWK '{print $2}'`
	AI_MANIFEST_ARGS3=`echo $BOOTARGS | $AWK '{print $3}'`
	#
	# If "boot cdrom - install" is specified at the OBP,
	# invoke the install with the default manifest
	#
	# If "boot cdrom - install prompt" is specified, prompt
	# for the location of the manifest
	#
	# If "boot cdrom" is specified at the OBP, simply exit
	#
	# We check for the presence of the block device
	# /devices/ramdisk-bootfs:a in order to determine
	# whether we are booted off of the net or not
	BOOTFS_DISK="/devices/ramdisk-bootfs:a"
	if [ ! -b "$BOOTFS_DISK" -a "$AI_MANIFEST_ARGS2" != "install" ]; then
		/usr/sbin/svcadm disable auto-installer
		exit $SMF_EXIT_OK
	fi

	if [ ! -b "$BOOTFS_DISK" -a "$AI_MANIFEST_ARGS2" = "install" ]; then
		if [ "$AI_MANIFEST_ARGS3" = "prompt" ]; then
			do_get_manifest
		else 
			setup_default_manifest
		fi
	fi
else
	AI_MANIFEST_LOCATION=`$PRTCONF -v |
	    $SED -n '/aimanifest/{;n;p;}' | $CUT -f 2 -d\'`
	#
	# Test to see if either a default manifest ought
	# to be used for installation or the manifest
	# location should be obtained at the command prompt
	#
	if [ "$AI_MANIFEST_LOCATION" = "default" ]; then
		setup_default_manifest
	elif [ "$AI_MANIFEST_LOCATION" = "prompt" ]; then
		do_get_manifest
	elif [ "$AI_MANIFEST_LOCATION" = "true" ]; then
		/usr/sbin/svcadm disable auto-installer
		exit $SMF_EXIT_OK
	fi
fi

#
# if a manifest already exists, don't do service discovery and
# use the manifest that's available
#
if [ -f $AI_MANIFESTDIR/default.xml ]; then
	cp $AI_MANIFESTDIR/default.xml $AISC_MANIFEST
	#
	# We shouldn't be writing to the ai_sd_log
	# at all. This is being done to make ICT happy
	# for when it comes around to transferring logs to
	# the installed system. Once ICT is reworked, this
	# line should completely go away.
	echo "Using the default configuration manifest for installation. " \
	    "Not doing service discovery." > /tmp/ai_sd_log
	echo "Using the default configuration manifest for installation" | \
	    $TEE_LOGTOCONSOLE
else
	do_service_discovery
	if [ $? -ne 0 ] ; then
		exit $SMF_EXIT_ERR_FATAL
	fi
	echo "Using the configuration manifest obtained via service " \
	    "discovery" | $TEE_LOGTOCONSOLE
fi

#
# Copy files required by XML validator to the same directory where AI manifest
# was stored. This is just temporary solution, better approach should be
# work out for long term
#

if [ ! -f /usr/share/auto_install/ai_manifest.rng ] ; then
	echo "Couldn't find /usr/share/auto_install/ai_manifest.rng"
	exit $SMF_EXIT_ERR_FATAL
fi
/usr/bin/cp /usr/share/auto_install/ai_manifest.rng /tmp/

if [ ! -f /usr/share/auto_install/ai_manifest.defval.xml ] ; then
	echo "Couldn't find /usr/share/auto_install/ai_manifest.defval.xml"
	exit $SMF_EXIT_ERR_FATAL
fi
/usr/bin/cp /usr/share/auto_install/ai_manifest.defval.xml /tmp/

exit $SMF_EXIT_OK
