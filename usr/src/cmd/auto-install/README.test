#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# README.test - testing procedures
#

AI service choosing engine (AISC)
=================================
Name of executable: /usr/bin/ai_get_manifest
Package: SUNWauto-install
Implementation: Python script

Purpose: Serves for obtaining AI and System Configuration (SC) combined manifest
from AI web server (please refer to AI design specification for more details)

Input: List of web servers to be contacted in format <address>:<port>,
Output: Obtained AI and SC combined manifest

[1] Test communication between AI web server and AISC
-----------------------------------------------------
* Prerequisites:
  - Running AI web server (please refer to AI web server testing
    procedure for appropriate information)
  - root privileges

* File containing list of services, e.g.
# cat ./service_list
ai-server.sun.com:8080

* Test procedure
# ./ai_get_manifest -s <service_list> -o <manifest>

* Expected output
ai_manifest file containinig combined AI and SC manifest
obtained from ai-server.sun.com:8080 web server

* Return codes
0 - success
1 - incorrect parameters provided
2 - manifest couldn't be obtained from given web server

[2] List criteria client knows and can provide to AI web server
---------------------------------------------------------------
* Test procedure
# ./ai_get_manifest -l

* Expected output
list of all name-value criteria pairs client can obtain information about

* Return codes
0 - success

[3] Run with increased debug verbosity
--------------------------------------
# ./ai_get_manifest -s <service_list> -o <manifest> -d 1-4

where '-d 4' enables the most verbose mode
