#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
#
# Copyright (c) 1984, 1986, 1987, 1988, 1989 AT&T.
# All rights reserved.
#

# Make sure that the libraries essential to this stage of booting can be found.
LD_LIBRARY_PATH=/lib; export LD_LIBRARY_PATH

#
# Set flags to indicate whether we are in LiveCD or AI environment
#
LIVECD=0
AUTOINSTALL=0
MOUNTED=0
[ -f /.livecd ] && LIVECD=1
[ -f /.autoinstall ] && AUTOINSTALL=1

PRTCONF=/usr/sbin/prtconf
SED=/usr/bin/sed
CUT=/usr/bin/cut
GREP=/usr/bin/grep
MKDIR=/usr/bin/mkdir
MOUNT=/sbin/mount

# Sparc installation configuration
INSTALL_CONF_FILE="install.conf"
INSTALL_CONF_SPEC="/tmp/$INSTALL_CONF_FILE"
NETBOOT="/etc/netboot"
WANBOOT_CONF="$NETBOOT/wanboot.conf"

# compressed archives
SOLARIS_ZLIB="solaris.zlib"
SOLARISMISC_ZLIB="solarismisc.zlib"

libc_mount() {
	#
	# If there is an optimized libc available in /usr that fits this
	# processor, mount it on top of the base libc.
	#
	MOE=`/usr/bin/moe -32 '/usr/lib/libc/$HWCAP'`
	if [ -n "$MOE" ]; then
		/usr/sbin/mount | egrep -s "^/lib/libc.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $MOE /lib/libc.so.1
		fi
	fi
}

# This mount function is sun4v only. It may be melded with the sun4u-us3
# version later.
sun4v_libc_psr_mount() {
	LIBC_MOE_32=`/usr/bin/moe -32 /platform/$PLAT/lib/libc_psr/'$HWCAP'`
	if [ -n "$LIBC_MOE_32" ]; then
		/usr/sbin/mount |
		    egrep -s "^/platform/[^/]*/lib/libc_psr.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $LIBC_MOE_32 \
			    /platform/$PLAT/lib/libc_psr.so.1
		fi
	fi

	LIBC_MOE_64=`/usr/bin/moe -64 \
	    /platform/$PLAT/lib/sparcv9/libc_psr/'$HWCAP'`
	if [ -n "$LIBC_MOE_64" ]; then
		/usr/sbin/mount |
		    egrep -s "^/platform/[^/]*/lib/sparcv9/libc_psr.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $LIBC_MOE_64 \
			    /platform/$PLAT/lib/sparcv9/libc_psr.so.1
		fi
	fi
}

# This is specific to sun4u[-us3].
# try to intelligently handle the various ways that a hwcap library can
# be present for libc_psr for sun4u.
sun4u_libc_psr_mount() {
	# first look for $PLAT specific
	# the string $HWCAP is not an env var but part of the argument to moe
	LIBC_MOE_32=`/usr/bin/moe -32 /platform/$PLAT/lib/libc_psr/'$HWCAP'`
	if [ -n "$LIBC_MOE_32" ]; then
		/usr/sbin/mount |
		    egrep -s "^/platform/$PLAT/lib/libc_psr.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $LIBC_MOE_32 \
			    /platform/$PLAT/lib/libc_psr.so.1
		fi
	else
		# try the 'generic' one under $ARCH
		LIBC_MOE_32=`/usr/bin/moe -32 \
		    /platform/$ARCH/lib/libc_psr/'$HWCAP'`
		if [ -n "$LIBC_MOE_32" ]; then
			/usr/sbin/mount |
			    egrep -s "^/platform/$ARCH/lib/libc_psr.so.1 on "
			if [ $? -ne 0 ]; then
				/usr/sbin/mount -O -F lofs $LIBC_MOE_32 \
				    /platform/$ARCH/lib/libc_psr.so.1
			fi
		fi

	fi

	# now repeat for 64 bit.

	LIBC_MOE_64=`/usr/bin/moe -64 \
	    /platform/$PLAT/lib/sparcv9/libc_psr/'$HWCAP'`
	if [ -n "$LIBC_MOE_64" ]; then
		/usr/sbin/mount |
		    egrep -s "^/platform/$PLAT/lib/sparcv9/libc_psr.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $LIBC_MOE_64 \
			    /platform/$PLAT/lib/sparcv9/libc_psr.so.1
		fi
	else
		# now try $ARCH version
		LIBC_MOE_64=`/usr/bin/moe -64 \
		    /platform/$ARCH/lib/sparcv9/libc_psr/'$HWCAP'`
		if [ -n "$LIBC_MOE_64" ]; then
			/usr/sbin/mount |
			    egrep -s \
			    "^/platform/$ARCH/lib/sparcv9/libc_psr.so.1 on "
			if [ $? -ne 0 ]; then
				/usr/sbin/mount -O -F lofs $LIBC_MOE_64 \
				    /platform/$ARCH/lib/sparcv9/libc_psr.so.1
			fi
		fi
	fi
}

#
# Most of the operations in this script are only necessary in the global
# zone but due to the way initialization scripts like this are packaged,
# it needs to currently exist for all zones.
#
if [ "${_INIT_ZONENAME:=`/sbin/zonename`}" != "global" ]; then
	libc_mount
	exit 0
fi

. /lib/svc/share/smf_include.sh
. /lib/svc/share/fs_include.sh


if [ $LIVECD = 1 -o $AUTOINSTALL = 1 ]; then
	#
	# Remount root RW
	#
	echo "\rRemounting root read/write" > /dev/msglog
	ISA_INFO=`/sbin/uname -p`
	if [ $ISA_INFO = "sparc" ]
	then
		# ramdisk is differently labeled in sparc vs x86
		/sbin/mount -o remount,rw /devices/ramdisk-root:a /
	else
		# x86 label
		/sbin/mount -o remount,rw /devices/ramdisk:a /
	fi


	#
	# Workaround for devfs lazy init. The sd nodes are not
	# created till you try to access them.
	#
	echo "Probing for device nodes ..." > /dev/msglog

	ls -lR /devices/* > /dev/null
fi

if [ $LIVECD = 1 ]; then
	volumeid=`cat /.volumeid`

	echo "\rPreparing live image for use" >/dev/msglog

	# Determine if any of the USB devices contains a UFS filesystem.
	# For devices that do, attempt to mount them to see if the 
	# compressed /usr filesystem exists

	/sbin/listusb | while read dev rdev
	do
		/usr/lib/fs/ufs/fstyp $rdev 2>&1 | grep "^ufs$"
		if [ $? -eq 0 ]
		then
			/sbin/mount -F ufs -o nologging,noatime $dev /.cdrom || break
			if [ -f /.cdrom/$SOLARIS_ZLIB ]
			then
				echo "" > /.liveusb
				break
			else
				/sbin/umount -f $dev
				continue
			fi
		fi
	done

	# ..Else look for CD
	[ ! -f /.liveusb ] && /sbin/listcd | while read dev rdev
	do
		/usr/lib/fs/hsfs/fstyp -v $rdev 2>&1 | grep "Volume id: $volumeid" > /dev/null
		if [ $? -eq 0 ]
		then
			/sbin/mount -F hsfs -o ro $dev /.cdrom || break
		fi
	done

	# Check if mount of /.cdrom failed.
	/sbin/mount | grep "^/.cdrom"
	if [ $? -ne 0 ]
	then
		echo "** FATAL **: Unable to access media"
		exit $SMF_EXIT_ERR_FATAL
	fi

	# Explictly create lofi devices for solaris.zlib and 
	# solarismisc.zlib

	
	#
	# Can not mount solaris.zlib using just the mount command,
	# because the mount command enforces nosetuid, and /usr
	# needs to have the setuid capability.
	#
	/usr/sbin/lofiadm -a /.cdrom/$SOLARIS_ZLIB /dev/lofi/1 || break
	/sbin/mount -F hsfs -o ro /dev/lofi/1 /usr
	if [ $? -ne 0 ]
	then
		echo "/usr MOUNT FAILED!" 
		exit $SMF_EXIT_ERR_FATAL
	fi


	/sbin/mount -F hsfs -o ro /.cdrom/$SOLARISMISC_ZLIB /mnt/misc
	if [ $? -ne 0 ]
	then
		echo "/mnt/misc MOUNT FAILED!"
		exit $SMF_EXIT_ERR_FATAL
	fi

	MOUNTED=1
	echo "Done mounting Live image" > /dev/msglog
elif [ $AUTOINSTALL = 1 ]; then
	echo "Preparing automated install image for use" > /dev/msglog

	# Prime the network
	/sbin/dhcpagent -a

	#
	# For SPARC mount wanbootfs which contains wanboot.conf file
	# associated with this client. root_file option defined there
	# points to the boot archive and has following format:
	# root_file=<ai_image>/boot/platform/sun4v/boot_archive
	# We need to extract <ai_image> part, since this is the
	# location of solaris*.zlib archives.
	#
	# For X86, get the install media from the menu.lst 
	#
	if [ "$ISA_INFO" = "sparc" ]; then
		# check if wanboot provided wanbootfs
		BOOTFS_DISK="/devices/ramdisk-bootfs:a"
		if [ ! -b "$BOOTFS_DISK" ] ; then
			echo "Sparc wanboot configuration file is not" \
			    "available" > /dev/msglog

			exit $SMF_EXIT_ERR_FATAL
		fi

		# create mountpoint for wanbootfs
		$MKDIR "$NETBOOT"

		if [ $? -ne 0 ] ; then
			echo "Couldn't create $NETBOOT directory" > \
			    /dev/msglog

			exit $SMF_EXIT_ERR_FATAL
		fi

		# mount wanbootfs which is hsfs(7FS) filesystem
		$MOUNT -F hsfs -o ro "$BOOTFS_DISK" "$NETBOOT" > \
		    /dev/msglog 2>&1

		if [ $? -ne 0 ] ; then
			echo "Couldn't mount wanbootfs filesystem" > \
			    /dev/msglog

			exit $SMF_EXIT_ERR_FATAL
		fi

		# check, if wanboot.conf is present
		if [ ! -f $WANBOOT_CONF ] ; then
			echo "$WANBOOT_CONF file not found" > /dev/msglog

			exit $SMF_EXIT_ERR_FATAL
		fi

		# extract path to directory containing AI image
		ai_image_dir=`$GREP "^root_file" $WANBOOT_CONF |
		    $CUT -d '=' -f 2 | $SED -e s-boot/platform/sun4v/boot_archive--`

		if [ -z "$ai_image_dir" ] ; then
			echo "Couldn't obtain location of AI image" > \
			    /dev/msglog

			exit $SMF_EXIT_ERR_FATAL
		fi

		echo "The AI image will be retrieved from $ai_image_dir" \
		    "directory" > /dev/msglog

		#
		# extract address of AI server from root_server option
		# It is in following format:
		# root_server=http://<ai_server>:<port>/<path_to_wanboot-cgi>
		#
		ai_server=`$GREP "^root_server" $WANBOOT_CONF |
		    $CUT -d '=' -f 2 | $CUT -d '/' -f 1-3`

		if [ -z "$ai_server" ] ; then
			echo "Couldn't obtain address of AI server" > \
			    /dev/msglog

			exit $SMF_EXIT_ERR_FATAL
		fi

		MEDIA="$ai_server$ai_image_dir"
	else
		# Get the install media data to use in http url
		MEDIA=`/usr/sbin/prtconf -v /devices | \
	    	    /usr/bin/sed -n '/install_media/{;n;p;}' | \
		    /usr/bin/cut -f 2 -d \'`

	fi

	#
	# Translate to valid url - it is dummy operation for now
	# since it is assumed that complete and valid URL was provided
	#
	url=$MEDIA
	if [ -z "$url" ]
	then
		echo "Couldn't determine source of automated install image" > \
		    /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi

	# Mount /tmp to download files
	/usr/lib/fs/tmpfs/mount swap /tmp
	if [ $? -ne 0 ]
	then
		echo "Mounting swap FAILED!" > /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi

	# Download compressed '/usr' and store to tmp
	echo "Downloading $SOLARIS_ZLIB archive" > /dev/msglog
	usr_fs="$url/$SOLARIS_ZLIB"
	/usr/bin/wget $usr_fs -O /tmp/$SOLARIS_ZLIB > \
	    /dev/msglog 2> /dev/msglog
	if [ $? -ne 0 ]
	then
		echo "Could not obtain $usr_fs archive from install" \
		    "server" > /dev/msglog

		echo "Please verify that the install server is correctly" \
		    "configured and reachable from the client" > /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	# Download rest of AI net image and store to tmp
	echo "Downloading $SOLARISMISC_ZLIB archive" > /dev/msglog
	misc_fs="$url/$SOLARISMISC_ZLIB"
	/usr/bin/wget $misc_fs -O /tmp/$SOLARISMISC_ZLIB > \
	    /dev/msglog 2> /dev/msglog
	if [ $? -ne 0 ]
	then
		echo "Could not obtain $misc_fs archive from" \
		    "install server" > /dev/msglog

		echo "Please verify that the install server is correctly" \
		    "configured and reachable from the client" > /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	# download the install.conf file to get the service name for SPARC
	if [ "$ISA_INFO" = "sparc" ]; then
		install_conf="$url/$INSTALL_CONF_FILE"
		/usr/bin/wget $install_conf -O $INSTALL_CONF_SPEC > \
		    /dev/msglog 2> /dev/msglog
		if [ $? -ne 0 ]; then
			echo "Could not obtain $install_conf file from" \
			    "install server" > /dev/msglog

			echo "Please verify that the install server is" \
			    "correctly configured and reachable from" \
			    "the client" > /dev/msglog

			exit $SMF_EXIT_ERR_FATAL
		fi
	fi

	# download the .image_info file for x86
	if [ "$ISA_INFO" != "sparc" ]; then
		img_info="$url/.image_info"
		/usr/bin/wget $img_info -O /tmp/.image_info > \
		    /dev/msglog 2> /dev/msglog
		if [ $? -ne 0 ]; then
			echo "Could not obtain $img_info file from install" \
			    "server" > /dev/msglog

			echo "Please verify that the install server is" \
			    "correctly configured and reachable from" \
			    "the client" > /dev/msglog

			exit $SMF_EXIT_ERR_FATAL
		fi
	fi

	# Lofi mount downloaded archives to /usr and /mnt/misc respectively

	#
	# Can not mount solaris.zlib using just the mount command,
	# because the mount command enforces nosetuid, and /usr
	# needs to have the setuid capability.
	#
	usr_lofi_dev=`/usr/sbin/lofiadm -a /tmp/solaris.zlib`
	if [ $? -ne 0 -o -z "$usr_lofi_dev" ]
	then
		echo "Couldn't lofi mount /usr filesystem" > /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi

	/sbin/mount -F hsfs -o ro $usr_lofi_dev /usr
	if [ $? -ne 0 ]
	then
		echo "Couldn't mount /usr filesystem" > /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi

	#
	# As setting 'nosuid' is acceptable for /mnt/misc filesystem,
	# we can take advantage of mounting that file directly and
	# skipping explicit lofi mount step required for /usr
	#
	/sbin/mount -F hsfs /tmp/$SOLARISMISC_ZLIB /mnt/misc
	if [ $? -ne 0 ]
	then
		echo "Couldn't mount /mnt/misc" > /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi
	MOUNTED=1
	echo "Done mounting automated install image" > /dev/msglog

	#
	# set keyboard layout to 'US-English'
	# This is just an interim solution.
	# For long term, keyboard layout will be defined
	# in AI manifest and set in ICT phase
	#
	/usr/bin/kbd -s US-English

	#
	# If requested, enable remote access via ssh
	#
	if [ $ISA_INFO = "sparc" ] ; then
		AI_ENABLE_SSH=`/usr/bin/grep "^livessh" $INSTALL_CONF_SPEC |
		    /usr/bin/cut -d'=' -f2`
	else
		AI_ENABLE_SSH=`prtconf -v /devices|sed -n '/livessh/{;n;p;}' |
		    cut -f 2 -d\'`
	fi

	if [ "$AI_ENABLE_SSH" = "enable" ]; then
		# generate ssh keys
		/lib/svc/method/sshd -c

		# enabled ssh server
		/usr/sbin/svcadm enable network/ssh
	fi
fi

# If archives were not mounted, complain and exit
if [ $MOUNTED -ne 1 ] ; then
	if [ $LIVECD = 1 ] ; then
		echo "** FATAL **: Unable to mount Live image!" > /dev/msglog
	elif [ $AUTOINSTALL = 1 ] ; then
		echo "Unable to mount the autoinstall image" > /dev/msglog
	fi
    exit $SMF_EXIT_ERR_FATAL
fi

#
# Root is already mounted (by the kernel), but still needs to be
# checked, possibly remounted and entered into mnttab. First
# mount /usr read only if it is a separate file system. This must
# be done first to allow utilities such as fsck and setmnt to
# reside on /usr minimizing the space required by the root file
# system.
#
readvfstab "/usr" < $vfstab
if [ -n "$mountp" ]; then
	if [ "$fstype" = cachefs ]; then
		#
		# Mount without the cache initially.  We'll enable it
		# later at remount time.  This lets us avoid
		# teaching the statically linked mount program about
		# cachefs.  Here we determine the backfstype.
		# This is not pretty, but we have no tools for parsing
		# the option string until we get /usr mounted...
		#
		case "$mntopts" in
		*backfstype=nfs*)
			cfsbacktype=nfs
			;;
		*backfstype=hsfs*)
			cfsbacktype=hsfs
			;;
		*)
			msg='invalid vfstab entry for /usr'
			echo $msg
			echo "$SMF_FMRI:" $msg >/dev/msglog
			cfsbacktype=nfs
			;;
		esac
		mountfs - /usr $cfsbacktype ro $special ||
		    exit $SMF_EXIT_ERR_FATAL
	else
		#
		# Must use -o largefiles here to ensure the
		# read-only mount does not fail as a result of
		# having a large file present on /usr. This gives
		# fsck a chance to fix up the largefiles flag
		# before we remount /usr read-write.
		#
		if [ "x$mntopts" = x- ]; then
			mntopts='ro,largefiles'
		else
			checkopt largefiles $mntopts
			if [ "x$option" != xlargefiles ]; then
				mntopts="largefiles,$mntopts"
			fi

			checkopt ro $mntopts
			if [ "x$option" != xro ]; then
				mntopts="ro,$mntopts"
			fi

			#
			# Requesting logging on a read-only mount
			# causes errors to be displayed, so remove
			# "logging" from the list of options for now.
			# The read-write mount performed later will
			# specify the logging option if appropriate.
			#

			checkopt logging $mntopts
			if [ "x$option" = xlogging ]; then
				mntopts="$otherops"
			fi
		fi

		mountfs -O /usr $fstype $mntopts - || exit $SMF_EXIT_ERR_FATAL
	fi
fi

#
# Also mount /boot now so that things like keymap.sh can access
# boot properties through eeprom.  Readonly isn't required because
# /boot (and other pcfs filesystems) aren't fsck'ed at boot yet.
# Also, we don't account for caching /boot as it must be on a local
# disk.  So what's in vfstab is fine as it stands; just look to see
# if it's there and avoid the mount if not.
#
readvfstab "/boot" < $vfstab

if [ -n "$mountp" ]; then
	mountfs - /boot $fstype $mntopts - || exit $SMF_EXIT_ERR_FATAL
fi

#
# Update kernel driver.conf cache with any additional driver.conf
# files found on /usr, and device permissions from /etc/minor_perm.
#
/usr/sbin/devfsadm -I -P

[ -f /etc/.dynamic_routing ] && /usr/bin/rm -f /etc/.dynamic_routing

libc_mount

# 
# Discover architecture and find and mount optimal libc_psr 
#  
PLAT=`/usr/bin/uname -i` 
ARCH=`/usr/bin/uname -m` 
if [ "$ARCH" = "sun4v" ]; then 
	sun4v_libc_psr_mount 
elif [ "$ARCH" = "sun4u" ]; then 
	if [ -h /platform/$PLAT/lib/libc_psr.so.1 ]; then 
		LINKSTO=`/usr/bin/ls -l /platform/$PLAT/lib/libc_psr.so.1 | 
			/usr/bin/awk '{print $NF}'` 
		if [ "$LINKSTO" = "../../sun4u-us3/lib/libc_psr.so.1" ]; then 
			ARCH=sun4u-us3 
		fi
	fi
	sun4u_libc_psr_mount 
fi

if [ $LIVECD = 1 -o $AUTOINSTALL = 1 ]
then
	/usr/bin/rm -f /etc/svc/repository-boot*

	# Mount opt
	/usr/sbin/mount -F lofs /mnt/misc/opt /opt
	
	#
	# Update runtime linker cache
	#
	if [ -f /etc/crle.conf ]
	then

		PATH=/usr/foss/bin:/usr/foss/firefox/bin:/usr/foss/thunderbird/bin:/sbin:/usr/sbin:/usr/bin:/usr/ccs/bin:/usr/X11R6/bin:/opt/DTT/bin
		export PATH

		LD_LIBRARY_PATH=/usr/foss/lib:/lib:/usr/lib:/usr/sfw/lib:/usr/X11R6/lib
		export LD_LIBRARY_PATH

		. /etc/crle.conf
		#/usr/bin/crle $CRLE_OPTS
	fi
fi

if [ $LIVECD = 1 ]
then
	#
	# Determine if we should beep to let users with visual
	# impairments know that they are being queried for information.
	#
	assistive_tech=`$PRTCONF -v /devices | \
	    $SED -n '/assistive_tech/{;n;p;}' | $CUT -f 2 -d\'`

	#
	# Ask user to configure Keyboard Layout
	#
	TERM=sun-color
	export TERM
	exec </dev/console >/dev/console 2>&1

	#
	# if requested via GRUB menu selection:
	#     enable ssh
	#     set keyboard layout to default of English
	#     set desktop language to default of English
	# else
	#     Ask user to configure Keyboard Layout and Desktop Language
	#
	livessh=`prtconf -v /devices|sed -n '/livessh/{;n;p;}'|cut -f 2 -d\'`
	if [ "$livessh" = "enable" ]; then
		/usr/sbin/svcadm enable network/ssh
		/usr/bin/kbd -s US-English
		/usr/sbin/set_lang default
	else
		#
		# Ask user to configure Keyboard Layout
		#
		if [ "x$assistive_tech" != "x" ] ; then
			printf "\\a"
		fi
		/usr/bin/kbd -s

		#
		# Ask user to configure Language
		#
		if [ "x$assistive_tech" != "x" ] ; then
			printf "\\a"
		fi
		/usr/sbin/set_lang
	fi

	# /usr/bin/setup.sh
	livemode=`prtconf -v /devices|sed -n '/livemode/{;n;p;}'|cut -f 2 -d\'`
	if [ "$livemode" = "text" ]; then
		/usr/sbin/svcadm disable -t application/graphical-login/gdm
	else
		[ "$livemode" = "vesa" ] && cp /.cdrom/jack/xorg.conf.vesa /etc/X11/xorg.conf
		/usr/sbin/svcadm enable application/graphical-login/gdm
	fi

fi

exit 0
