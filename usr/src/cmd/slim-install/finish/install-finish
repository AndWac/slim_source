#!/usr/bin/python2.4
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
'''
perform all Python Slim Install Completion Tasks (ICT)

ICT module performs all error checking and logging, so limited error checking is performed here
Sets exit status to non-zero value if major failure during script, 0 otherwise

Parameters:
	target root pathname - required
	debugging level (if invalid, ignored)
	
This Python script has been taken from the former install-finish shell script
with some tasks taken from the Transfer Module (transfer_mod.py).
'''
import sys
import getopt
import os
from stat import *
from osol_install.ict import *
import platform

# Test to see if running in an automated install environment
def autoinstall_exists():
        if os.path.exists('/.autoinstall'):
                return 1
        else:
                return 0
# Test to see if running on a SPARC platform
IS_SPARC = (platform.platform().find('sparc') >= 0)

info_msg('Starting Python script of Install Completion Tasks')

BASEDIR = ""           # argument B
USER_SPEC_DBGLVL = ""  # argument d
ROOT_PW = ""           # argument R
NU_GOS  = ""           # argument n
NU_LOGIN = ""          # argument l
NU_PW = ""             # argument p
NU_GID = "101"         # argument G
NU_UID = "10"          # argument U

#parse command line arguments
try:
	opts,args = getopt.getopt(sys.argv[1:],'B:d:R:n:l:p:G:U:')
except getopt.GetoptError,e:
	prerror('Parsing command line arguments failed. (%s)' % str(e))

	prerror('Usage: -B <target basedir>')
	prerror('       [-d <debug level>] -  LS_DBGLVL_EMERG LS_DBGLVL_ERR LS_DBGLVL_WARN LS_DBGLVL_INFO')
	prerror('       [-R <root password>] - default is blank')
	prerror('       [-n <new user name (GOS)>] - default is blank')
	prerror('       [-l <new user login>]')
	prerror('       [-p <new user password>] - default is blank')
	prerror('       [-G <new user GID>] - default is 101')
	prerror('       [-U <new user UID>] - default is 10')
	sys.exit(ICT_INVALID_PARAMETER)

for o,a in opts:
	if o in '-B':
		BASEDIR = a
	if o in '-d':
		USER_SPEC_DBGLVL = a
	if o in '-R':
		ROOT_PW = a
	if o in '-n':
		NU_GOS  = a
	if o in '-l':
		NU_LOGIN = a
	if o in '-p':
		NU_PW = a
	if o in '-G':
		NU_GID = a
	if o in '-U':
		NU_UID = a

info_msg('BASEDIR: %s' % BASEDIR)
info_msg('USER_SPEC_DBGLVL: %s' % USER_SPEC_DBGLVL)
info_msg('ROOT_PW: %s' % ROOT_PW)
info_msg('NU_GOS: %s' % NU_GOS)
info_msg('NU_LOGIN: %s' % NU_LOGIN)
info_msg('NU_PW: %s' % NU_PW)
info_msg('NU_GID: %s' % NU_GID)
info_msg('NU_UID: %s' % NU_UID)

#perform ICT initialization, specifying root target path, debugging level

if not BASEDIR:
	prerror('caller must provide the root target directory.')
	sys.exit(ICT_INVALID_PARAMETER)

#if debugging level is known symbolic value, use liblogsvc symbol
dbglvl = -1 #default to no change in debugging level
if USER_SPEC_DBGLVL == 'LS_DBGLVL_EMERG': dbglvl = LS_DBGLVL_EMERG
elif USER_SPEC_DBGLVL == 'LS_DBGLVL_ERR': dbglvl = LS_DBGLVL_ERR
elif USER_SPEC_DBGLVL == 'LS_DBGLVL_WARN': dbglvl = LS_DBGLVL_WARN
elif USER_SPEC_DBGLVL == 'LS_DBGLVL_INFO': dbglvl = LS_DBGLVL_INFO
if dbglvl != -1:
	icto = ict(BASEDIR, dbglvl) #set debugging level
else:
	icto = ict(BASEDIR) #take default for debugging level

#perform nearly all Slim Install Completion Tasks

sa = [] #init array of return statuses

if autoinstall_exists():
	# Doing an automated install

	if IS_SPARC:
		# Invoke the required ICT for SPARC platform

		#ICTs ported from Transfer Module
		sa.append(icto.create_smf_repository())
		sa.append(icto.keyboard_layout())
		#ICTs ported from original install-finish
		sa.append(icto.fix_browser_home_page())
		sa.append(icto.set_Solaris_partition_active())
		sa.append(icto.update_dumpadm_nodename())
		sa.append(icto.setup_dev_namespace())
		sa.append(icto.update_boot_archive())
		sa.append(icto.create_sparc_boot_menu())
		sa.append(icto.copy_sparc_bootlst())
		sa.append(icto.remove_files(['/boot/solaris/filestat.ramdisk']))
		sa.append(icto.smf_correct_sys_profile())
		sa.append(icto.add_sysidtool_sys_unconfig_entries())
		sa.append(icto.configure_nwam())
		sa.append(icto.enable_nwam_AI())
		sa.append(icto.set_flush_content_cache_on_success_false())
		sa.append(icto.set_root_password(ROOT_PW))
		sa.append(icto.create_new_user(NU_GOS, NU_LOGIN, NU_PW, NU_GID, NU_UID))
	else:
		# Invoke the required ICT for non-SPARC platform

		#ICTs ported from Transfer Module
		sa.append(icto.create_smf_repository())
		sa.append(icto.keyboard_layout())
		#ICTs ported from original install-finish
		sa.append(icto.set_prop_from_eeprom('keyboard-layout'))
		sa.append(icto.set_console_boot_device_property())
		sa.append(icto.add_splash_image_to_grub_menu())
		sa.append(icto.fix_browser_home_page())
		sa.append(icto.set_Solaris_partition_active())
		sa.append(icto.remove_bootpath())
		sa.append(icto.fix_grub_entry())
		sa.append(icto.add_other_OS_to_grub_menu())
		sa.append(icto.update_dumpadm_nodename())
		sa.append(icto.explicit_bootfs())
		sa.append(icto.enable_happy_face_boot())
		sa.append(icto.setup_dev_namespace())
		sa.append(icto.update_boot_archive())
		sa.append(icto.remove_files(['/boot/solaris/filestat.ramdisk']))
		sa.append(icto.copy_splash_xpm())
		sa.append(icto.smf_correct_sys_profile())
		sa.append(icto.add_sysidtool_sys_unconfig_entries())
		sa.append(icto.configure_nwam())
		sa.append(icto.enable_nwam_AI())
		sa.append(icto.set_flush_content_cache_on_success_false())
		sa.append(icto.set_root_password(ROOT_PW))
		sa.append(icto.create_new_user(NU_GOS, NU_LOGIN, NU_PW, NU_GID, NU_UID))

else:
	# Doing a GUI install

	# At this time there is no SPARC specific processed needed for GUI install 

	#ICTs ported from Transfer Module
	sa.append(icto.create_smf_repository())
	sa.append(icto.create_mnttab())
	sa.append(icto.cleanup_unneeded_files_and_directories())
	sa.append(icto.keyboard_layout())
	sa.append(icto.delete_misc_trees())
	#ICTs ported from original install-finish
	sa.append(icto.set_prop_from_eeprom('keyboard-layout'))
	sa.append(icto.set_console_boot_device_property())
	sa.append(icto.add_splash_image_to_grub_menu())
	sa.append(icto.fix_browser_home_page())
	sa.append(icto.remove_liveCD_coreadm_conf())
	sa.append(icto.set_Solaris_partition_active())
	sa.append(icto.remove_bootpath())
	sa.append(icto.fix_grub_entry())
	sa.append(icto.add_other_OS_to_grub_menu())
	sa.append(icto.update_dumpadm_nodename())
	sa.append(icto.explicit_bootfs())
	sa.append(icto.enable_happy_face_boot())
	sa.append(icto.update_boot_archive())
	sa.append(icto.remove_files(['/boot/solaris/filestat.ramdisk']))
	sa.append(icto.copy_splash_xpm())
	sa.append(icto.smf_correct_sys_profile())
	sa.append(icto.add_sysidtool_sys_unconfig_entries())
	sa.append(icto.enable_nwam())
	sa.append(icto.remove_liveCD_environment())
	sa.append(icto.remove_install_specific_packages(['SUNWslim-utils', 'SUNWgui-install']))
	sa.append(icto.set_flush_content_cache_on_success_false())
	sa.append(icto.set_root_password(ROOT_PW))
	sa.append(icto.create_new_user(NU_GOS, NU_LOGIN, NU_PW, NU_GID, NU_UID))
	sa.append(icto.reset_image_UUID())

info_msg('Post-transfer Python Install Completion Tasks finished.')

errcount = 0
for s in sa:
	if s != 0:
		errcount += 1

if errcount > 0:
	info_msg(str(errcount) + ' out of ' + str(len(sa)) +
	    ' total Python ICTs finished with errors')
	sys.exit(1) #signal script completed, exiting with failure status
else:
	info_msg('All ' + str(len(sa)) + ' Python ICTs finished successfully')
	sys.exit(0) #signal script completed, exiting with success status
