#!/bin/ksh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

# =============================================================================
# =============================================================================
# post_bootroot_pkg_image_mod
#
# Customizations to the package image area after bootroot construction completes
# =============================================================================
# =============================================================================

# Define a few commands.
CPIO=/usr/bin/cpio
CUT=/usr/bin/cut
DU=/usr/bin/du
FIND=/usr/bin/find
GREP=/usr/bin/grep
HEAD=/usr/bin/head
LOFIADM=/usr/sbin/lofiadm
MKDIR=/usr/bin/mkdir
MKFILE=/usr/sbin/mkfile
MKISOFS=/usr/bin/mkisofs
MOUNT=/usr/sbin/mount
MV=/usr/bin/mv
NEWFS=/usr/sbin/newfs
RM=/usr/bin/rm
RMDIR=/usr/bin/rmdir
SED=/usr/bin/sed
TIME=/usr/bin/time
UMOUNT=/usr/sbin/umount
XARGS=/usr/bin/xargs

# Define non-core-OS commands.
MANIFEST_READ=/usr/bin/ManifestRead

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
create_ufs_fs()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Creates a UFS file system with the specified name and size, and mount it
# on the specified mountpoint
#
# Args:
# 
#  fname: name of the file to be used as the file system
#
#  size: size of the file system to create in kilobyte
#
#  mntpt: mount point to mount this file system
#
# Returns:
#  0 on success
#  1 on error
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
	if [ "$#" -ne 3 ] ; then
		print -u2 "$0: Calling create_ufs_fs() with the" \
		    "wrong number of arguments"
		return 1
	fi
	fname=$1
	size=$2
	mntpt=$3

	# create the mount point
        [ -d $mntpt ] || $MKDIR -p $mntpt
	if [ $? -ne 0 ] ; then
		print -u2 "$0: create_ufs_fs: Unable to mkdir $mntpt"
		return 1	
	fi

        $RM -f $fname
        $MKFILE ${size}k $fname
	if [ $? -ne 0 ] ; then
		print -u2 "$0: create_ufs_fs: Unable to create file $fname" \
		    "for ufs filesystem"
		$RMDIR $mntpt
		return 1
	fi

        # loopback mount the boot archive
        lofidev=`$LOFIADM -a $fname`
        if [ $? -ne 0 ] ; then
                print -u2 "$0: create_ufs_fs: Unable to create loopback" \
		    "device for $fname"
		$RM $fname
		$RMDIR $mntpt
		return 1
        fi

	# get the boot archive raw device and create a filesystem on it
        rlofidev=`echo $lofidev | $SED s/lofi/rlofi/`
        $NEWFS -m 0 $rlofidev < /dev/null 
        if [ $? -ne 0 ] ; then
                print -u2 "$0: create_ufs_fs: Unable to newfs $rlofidev"
		$LOFIADM -d $fname
		$RM $fname
		$RMDIR $mntpt
		return 1
        fi

	# mount ufs filesystem on the specified mountpoint
        $MOUNT -o nologging $lofidev $mntpt
        if [ $? -ne 0 ] ; then
                print -u2 "$0: create_ufs_fs: Unable to mount $lofidev" \
		    "on $mntpt"
		$LOFIADM -d $fname
		$RM $fname
		$RMDIR $mntpt
		return 1
        fi

	return 0
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Main
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Customizations to the package image area after bootroot construction
# completes.
# 
# Args:
#   MFEST_SOCKET: Socket needed to get manifest data via ManifestRead object
#
#   PKG_IMG_PATH: Package image area
#
#   TMP_DIR: Temporary directory to contain the bootroot file
#
#   BR_BUILD: Area where bootroot is put together (not used)
#
#   MEDIA_DIR: Area where the media is put. (Not used)
# 
#   USER_ZLIB_KEY=USER_ZLIB_ALG: The compression algorithm used for the usr.zlib.
#		USER_ZLIB_KEY is required to be the string "usr_zlib_compression"
#		USER_ZLIB_ALG is an algorithm that's accepted by the lofiadm command.
#
# Note: This assumes a populated pkg_image area exists at the location
#		${PKG_IMG_PATH} and that the bootroot has been built.
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if [ "$#" != "6" ] ; then
	print -u2 "Usage: $0: Requires 6 args:"
	print -u2 "    Reader socket, pkg_image area, tmp_dir,"
	print -u2 "    bootroot build area, media area, usr zlib compression algorithm"
	exit 1
fi

MFEST_SOCK=$1

PKG_IMG_PATH=$2
if [ ! -d $PKG_IMG_PATH ] ; then
	print -u2 "$0: Image package area $PKG_IMG_PATH is not valid"
	exit 1
fi

TMP_DIR=$3
if [ ! -d $TMP_DIR ] ; then
	print -u2 "$0: Temporary area $TMP_DIR is not valid"
	exit 1
fi

USER_ZLIB_KEY=`echo $6|cut -d'=' -f1`
if [ "XX${USER_ZLIB_KEY}" != "XXusr_zlib_compression" ] ; then
	print -u2 "Key to specify usr zlib compression algorithm is not valid."
	exit 1
fi

USER_ZLIB_ALG=`echo $6|cut -d'=' -f2`
#
# Just make sure the algorithm is not an empty string.  We will not
# check to make sure whether it is a valid algorithm or not here.
# This way, we can accomodate any algorithm in the future.
# If the algorithm is not valid, the error will be reported when
# it is actually being used by lofiadm
#
if [ "XX${USER_ZLIB_ALG}" = "" ] ; then
	print -u2 "Algorithm for usr zlib compression is not specified."
	exit 1
fi

COMPRESSION_TYPE=`$MANIFEST_READ $MFEST_SOCK \
    "img_params/live_img_compression/type"`
if [ "XX${COMPRESSION_TYPE}" = "XX" ] ; then
	COMPRESSION_TYPE="gzip"
fi

# Note that DIST_ISO_SORT may or may not exist, given the type of image.
DIST_ISO_SORT=`$MANIFEST_READ -k $MFEST_SOCK "iso_sort"`

# Remove password lock file left around from user actions during
# package installation; if left in place it becomes a symlink
# into /mnt/misc which will cause the installer's attempt to
# create a user account to fail
$RM ${PKG_IMG_PATH}/etc/.pwd.lock

if [ ! -d $PKG_IMG_PATH ] ; then
	print -u2 "$0: Image package area $PKG_IMG_PATH is not valid"
	exit 1
fi
cd $PKG_IMG_PATH

# sbin, kernel and lib are all in the root archive
print -u2 "Removing sbin, kernel and lib from package image area"
$RM -rf sbin kernel lib

# platform only needs to contain the kernel
if [ -d ${PKG_IMG_PATH}/platform ] ; then
	cd ${PKG_IMG_PATH}/platform
	$FIND . -type f -a ! -name unix | $XARGS $RM -f
fi

# Generate GRUB menu for CD using release name from /etc/release
release=`$HEAD -1 ${PKG_IMG_PATH}/etc/release | $SED 's/^ *//'`
$SED "s/OS_VER/${release}/" <<ENDMENU >${PKG_IMG_PATH}/boot/grub/menu.lst
default=0
timeout=30
splashimage=/boot/grub/splash.xpm.gz
foreground=ffffff
background=215ECA
title OS_VER
	kernel$ /platform/i86pc/kernel/\$ISADIR/unix
	module /boot/x86.microroot

title OS_VER text console
	kernel$ /platform/i86pc/kernel/\$ISADIR/unix -B livemode=text
	module /boot/x86.microroot

title Boot from Hard Disk
	rootnoverify (hd0)
	chainloader +1
ENDMENU

print "Generating usr filesystem image"
if [ ! -d $PKG_IMG_PATH ] ; then
	print -u2 "$0: Image package area $PKG_IMG_PATH is not valid"
	exit 1
fi
cd $PKG_IMG_PATH

if [[ "X${DIST_ISO_SORT}" != "X" && -s "${DIST_ISO_SORT}" ]]; then
	SORT_OPTION="-sort $DIST_ISO_SORT"
	print "Sorting according to $DIST_ISO_SORT"
else
	SORT_OPTION=""
fi

$MKISOFS -o solaris.zlib $SORT_OPTION -quiet -N -l -R \
    -U -allow-multidot -no-iso-translate -cache-inodes \
    -d -D -V "compress" usr

if [ $? -ne 0 ] ; then
	print -u2 "$0: mkisofs of solaris failed"
	exit 1	
fi

print "Confirm lofiadm is available in image..."
if [ ! -f ${PKG_IMG_PATH}${LOFIADM} ] ; then
	print -u2 "$0: ${PKG_IMG_PATH}${LOFIADM} NOT FOUND"
	exit 1
fi

LOFI_OUT_STR=${TMP_DIR}/lofi_out_str.$$

print "Compressing usr filesystem image using compression algorithm: ${USER_ZLIB_ALG}"
LD_LIBRARY_PATH=${PKG_IMG_PATH}/usr/lib $TIME ${PKG_IMG_PATH}/${LOFIADM} \
    -C ${USER_ZLIB_ALG} ${PKG_IMG_PATH}/solaris.zlib >/dev/null \
    2>$LOFI_OUT_STR
if [ $? -ne 0 ] ; then
	$GREP "invalid algorithm name" $LOFI_OUT_STR
	if [ $? -eq 0 ] ; then
		print -u2 "$0: $COMPRESSION_TYPE is an invalid lofiadm" \
		    "algorithm."
		print -u2 "Please modify your COMPRESSION_TYPE parameter."
		$RM $LOFI_OUT_STR
		exit 1
	fi
	$RM $LOFI_OUT_STR
	print -u2 "$0: compression of usr filesystem failed"
	exit 1	
fi
$RM $LOFI_OUT_STR

print "Generating pkg filesystem image"

#
# Still at the top of the package image area ${PKG_IMG_PATH}
#

#name of the archive containing the contents of IPS data
pkgarchive=${PKG_IMG_PATH}/pkg.zlib
pkgarchive_mntpt=${TMP_DIR}/pkgarchive_mntpt

#
# Calculate the size of the pkg data directory.  Add 1% of the
# total size just to be sure there's enough space.
# The calculation assume that the size of var/pkg is bigger than 100k
#
raw_size=`$DU -sk var/pkg | $CUT -f1`
pkgarchive_size=$(($raw_size / 100 + $raw_size))

create_ufs_fs $pkgarchive $pkgarchive_size $pkgarchive_mntpt
if [ "$?" == 1 ] ; then
	print -u2 "$0: Error calling create_ufs_fs"
	exit 1
fi

#copy the content of proto area's var/pkg to the pkg archive

#
#Since the "var" directory in the pkg.zlib archive doesn't exist,
#the cpio command for var/pkg will create it as the user that runs the command,
#instead of the real user/group of the "var" directory from the
#package image area.  So, we need to create the var directory in
#pkg.zlib as a special case so it has the correct uid/gid/permission
#

/usr/bin/echo "var" | /usr/bin/cpio -pdum ${pkgarchive_mntpt}

/bin/find var/pkg | /usr/bin/cpio -pdum ${pkgarchive_mntpt}

$UMOUNT $pkgarchive_mntpt
$LOFIADM -d $pkgarchive

print "Compressing pkg archive using compression algorithm: ${COMPRESSION_TYPE}"
LD_LIBRARY_PATH=${PKG_IMG_PATH}/usr/lib $TIME ${PKG_IMG_PATH}${LOFIADM} \
    -C $COMPRESSION_TYPE $pkgarchive >/dev/null 2>&1
if [ $? -ne 0 ] ; then
	print -u2 "$0: compression of pkg archive failed"
	exit 1
fi
$RM -rf ${PKG_IMG_PATH}/var/pkg/*

print "Generating misc filesystem image"
if [ ! -d $PKG_IMG_PATH ] ; then
	print -u2 "$0: Image package area $PKG_IMG_PATH is not valid"
	exit 1
fi
cd $PKG_IMG_PATH
$MKDIR miscdirs
$MV opt miscdirs
$MV etc miscdirs
$MV var miscdirs
$MKISOFS -o solarismisc.zlib -N -l -R -U -allow-multidot \
    -no-iso-translate \
    -quiet -cache-inodes -d -D -V "compress" miscdirs
if [ "$?" != "0" ] ; then
	print -u2 "$0: mkisofs of solarismisc failed"
	exit 1	
fi
$RM -rf miscdirs

print "Compressing misc filesystem image using compression algorithm: ${COMPRESSION_TYPE}"
LD_LIBRARY_PATH=${PKG_IMG_PATH}/usr/lib $TIME ${PKG_IMG_PATH}${LOFIADM} \
    -C $COMPRESSION_TYPE ${PKG_IMG_PATH}/solarismisc.zlib >/dev/null 2>&1
if [ "$?" != "0" ] ; then
	print -u2 "$0: compression of solarismisc failed"
	exit 1	
fi

#
# Delay rm of usr because lofiadm is used from usr to compress
# solaris, pkg, and solarismisc
#
$RM -rf ${PKG_IMG_PATH}/usr

exit 0
