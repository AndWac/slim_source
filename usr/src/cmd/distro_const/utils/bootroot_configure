#!/usr/bin/ksh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

# =============================================================================
# =============================================================================
# bootroot_configure - Configure a populated bootroot area
#				into a usable bootroot, less archiving.
# =============================================================================
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
create_sym_links()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Make symbolic links from the bootroot out to all files not existing in the
# bootroot.  Create any needed directories as well..
#
# Args:
#   Package Image Area Filelist: file containing names of all files/dirs in
#	package image area.
#
#   Bootroot Filelist: file containing names of all files/dirs in the bootroot
#
#   Mount Point: Copies of actual files exist in a lofi-mounted filesystem.
#	This argo represents the lofi-mount point of that filesystem.
#
# Note: Assumes current directory is $BR_BUILD
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
        PKG_IMG_FILELIST=$1
        BOOTROOT_FILELIST=$2
        MNT_PT=$3

	# Create a fresh empty list of processed files.
        PROC_FILELIST=${TMP_DIR}/plist
        $RM -f ${PROC_FILELIST}
        $TOUCH ${PROC_FILELIST}

	# Loop through all files in the package image area
        for pi_file in `cat ${PKG_IMG_FILELIST}`
        do
		#
                # Skip this file if it has already been processed or it
                # already exists in the bootroot
                #
                $GREP "^${pi_file}$" ${PROC_FILELIST} > /dev/null
                [ $? -eq 0 ] && continue
                $GREP "^${pi_file}$" ${BOOTROOT_FILELIST} > /dev/null
                [ $? -eq 0 ] && continue

		#
		# Create any missing directory path to the file and
		# add it to the list of processed files/dirs.
		#
                dir=`dirname $pi_file`
                if [ ! -d $dir ]; then
                        $MKDIR -p $dir
                        echo $dir >> ${BOOTROOT_FILELIST}
                fi

                p=$pi_file

		# If the file is a directory, append a / to the end of the name.
                [ -d ${BOOTROOT_FILELIST}/${p} ] && p=$p/

		# Create the link from the bootroot to the actual file.
                $LN -sf ${MNT_PT}/${pi_file} ${pi_file}

		# Add the file to the list of processed files/dirs.
                echo "$p" >> ${PROC_FILELIST}
        done

}


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Main
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Configure a populated bootroot area into a usable bootroot, less archiving.
# 
# Args:
#   MFEST_SOCKET: Socket needed to get manifest data via ManifestRead object
#
#   PKG_IMG_PATH: Package image area
#
#   TMP_DIR: Temporary directory to contain the bootroot file
#
#   BR_BUILD: Area where bootroot is put together.
#
#   MEDIA_DIR: Area where the media is put. (Not used)
#
#   MKREPO_FILE: Used to set up the SMF repository
#
#   IMG_TYPE_MARKER_FILE: Denotes the type of image.
#
# Note: This assumes a populated bootroot area exists at $BR_BUILD.
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Verify argument count
if [ $# != 7 ] ; then
	print -u2 "$0: Requires 7 args: Reader socket, pkg_image area,"
	print -u2 "    tmp dir, bootroot build area, media area,"
	print -u2 "    SMF setup, img_type_file."
	exit 1
fi

# Get commandline args.  First 5 are passed to all finalizer scripts.
MFEST_SOCKET=$1
PKG_IMG_PATH=$2
if [ ! -d $PKG_IMG_PATH ] ; then
	print -u2 "$0: Image package area $PKG_IMG_PATH is not valid"
	exit 1
fi

TMP_DIR=$3
if [ ! -d $TMP_DIR ] ; then
	print -u2 "$0: Temporary area $TMP_DIR is not valid"
	exit 1
fi

BR_BUILD=$4
if [ ! -d $BR_BUILD ] ; then
	print -u2 "$0: Bootroot build area is not valid"
	exit 1
fi

# Args explicitly specified in manifest for this script.
MKREPO_FILE=$6
if [ ! -f $MKREPO_FILE ] ; then
	print -u2 "$0: SMF Profile $MKREPO_FILE is not valid"
	exit 1
fi

IMG_TYPE_MARKER_FILE=$7

# Define a few commands.
CD=cd		# Built into the shell
CHMOD=/usr/bin/chmod
CHOWN=/usr/bin/chown
CHROOT=/usr/sbin/chroot
DEVFSADM=/usr/sbin/devfsadm
FIND=/usr/bin/find
GREP=/usr/xpg4/bin/grep
LN=/usr/bin/ln
MKDIR=/usr/bin/mkdir
RM=/usr/bin/rm
TOUCH=/usr/bin/touch

# These commands are not delivered with the core OS.
MANIFEST_READ=/usr/bin/ManifestRead
MKREPO=/usr/share/distro_const/mkrepo

# Name of volume ID file in the bootroot
VOLID_FILENAME=.volumeid

print "Configuring bootroot..."

# Configure devices
${BR_BUILD}/${DEVFSADM} -r $BR_BUILD

# Set up /etc/coreadm.conf.  Calling coreadm affects the host system by calling
# into SMF services.  This is to have coreadm take affect on the live system.
# It is safe to just create the coreadm.conf file for live_CD as there is no
# live system which would miss the SMF changes.
#
# Below creates a coreadm.conf as if the following is run:
#	$COREADM -g /tmp/core -G default -i core -I default -e process
#
cat << \COREADM_CONF_EOF > $BR_BUILD/etc/coreadm.conf
#
# coreadm.conf
#
# Parameters for system core file configuration.
# Do NOT edit this file by hand -- use coreadm(1) instead.
#
COREADM_GLOB_PATTERN=/tmp/core
COREADM_GLOB_CONTENT=default
COREADM_INIT_PATTERN=core
COREADM_INIT_CONTENT=default
COREADM_GLOB_ENABLED=no
COREADM_PROC_ENABLED=yes
COREADM_GLOB_SETID_ENABLED=no
COREADM_PROC_SETID_ENABLED=no
COREADM_GLOB_LOG_ENABLED=no
COREADM_CONF_EOF
# Note: end of coreadm.conf

# Setup the /etc/rtc_config file, assuming it is GMT.
# We couldn't use "/usr/sbin/rtc" command because even doing it
# with chroot seem to still affect the host on which chroot is run.
cat << \RTC_CONFIG_EOF > $BR_BUILD/etc/rtc_config
#
#       This file (/etc/rtc_config) contains information used to manage the
#       x86 real time clock hardware.  The hardware is kept in
#       the machine's local time for compatibility with other x86
#       operating systems.  This file is read by the kernel at
#       boot time.  It is set and updated by the /usr/sbin/rtc
#       command.  The 'zone_info' field designates the local
#       time zone.  The 'zone_lag' field indicates the number
#       of seconds between local time and Greenwich Mean Time.
#
zone_info=GMT
zone_lag=0
RTC_CONFIG_EOF

# Set nodename to opensolaris
echo "opensolaris" > $BR_BUILD/etc/nodename

print "Preloading SMF repository..."
$MKREPO $BR_BUILD $MKREPO_FILE $PKG_IMG_PATH

$CD $BR_BUILD

# create ./bin -> ./usr/bin symlink
$LN -s ./usr/bin

# Create mount points for misc and pkg zlibs.
$MKDIR mnt/misc
$CHMOD 0755 mnt/misc
$MKDIR mnt/pkg
$CHMOD 0755 mnt/pkg

# create volume id file

VOLNAME=`$MANIFEST_READ ${MFEST_SOCKET} "name"`
if [ "XX${VOLNAME}" == "XX" ] ; then
	print -u2 "$0: Error retrieving volume ID"
	exit 1
fi

echo $VOLNAME > $VOLID_FILENAME
$CHMOD 0444 $VOLID_FILENAME
$CHOWN root:root $VOLID_FILENAME

# create the file marking the image type (e.g. .autoinstall or .livecd)
$TOUCH $IMG_TYPE_MARKER_FILE

# create ./.cdrom directory
$MKDIR .cdrom
$CHMOD 0755 .cdrom

# create a symlink in the bootroot to the opt directory in the misc archive
$LN -s /mnt/misc/opt opt

#
# Additional /var /etc setup. A bunch of files in /var and /etc
# are left out of the ramdisk otherwise they will increase ramdisk
# size substantially. The code below automatically populates the
# ramdisk with symlinks to another mountpoint where the rest of
# /var and /etc are mounted from another compressed lofi file.
#

print "Creating additional symlinks in ramdisk ..."

$FIND * > ${TMP_DIR}/bootroot_filelist

# /mnt/misc will contain pkg_image area /etc and /var contents, less /var/pkg
($CD $PKG_IMG_PATH; $FIND etc var | $GREP -v var\/pkg) \
    > ${TMP_DIR}/mlst
create_sym_links ${TMP_DIR}/mlst  ${TMP_DIR}/bootroot_filelist "/mnt/misc"

# /mnt/pkg will contain pkg_image area /var/pkg contents
($CD $PKG_IMG_PATH; $FIND var/pkg) > ${TMP_DIR}/mlst

create_sym_links ${TMP_DIR}/mlst ${TMP_DIR}/bootroot_filelist "/mnt/pkg"

exit 0
